services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: agent_dojo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"  # Using 5433 to avoid conflict with local PostgreSQL
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Langfuse Observability Platform
  langfuse-server:
    image: langfuse/langfuse:2
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3001:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/langfuse
      - NEXTAUTH_SECRET=mysecret
      - SALT=mysalt
      - NEXTAUTH_URL=http://localhost:3001
      - TELEMETRY_ENABLED=false
      - LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES=true
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://langfuse-server:3000/api/public/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agent Dojo Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/agent_dojo
      - REDIS_URL=redis://redis:6379/0
      - LANGFUSE_PUBLIC_KEY=pk-lf-your-public-key
      - LANGFUSE_SECRET_KEY=sk-lf-your-secret-key  
      - LANGFUSE_HOST=http://langfuse-server:3000
      - COMPOSIO_API_KEY=${COMPOSIO_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./agent_dojo:/app/agent_dojo
      - ./pyproject.toml:/app/pyproject.toml
      - ./uv.lock:/app/uv.lock
    command: uv run uvicorn agent_dojo.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker for Background Tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/agent_dojo
      - REDIS_URL=redis://redis:6379/0
      - LANGFUSE_PUBLIC_KEY=pk-lf-your-public-key
      - LANGFUSE_SECRET_KEY=sk-lf-your-secret-key
      - LANGFUSE_HOST=http://langfuse-server:3000
      - COMPOSIO_API_KEY=${COMPOSIO_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./agent_dojo:/app/agent_dojo
      - ./pyproject.toml:/app/pyproject.toml
      - ./uv.lock:/app/uv.lock
    command: uv run celery -A agent_dojo.workers.celery_app worker --loglevel=info

  # Frontend Development Server
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
    command: npm run dev

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: agent_dojo_network